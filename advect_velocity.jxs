<jittershader name="default">
	<description>Default Slab </description>
	<param name="scale" type="float" default="1.0" />
	<param name="texDye" type="int" default="1" />
	<param name="texVel" type="int" default="0" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="dt" type="float" default="1." />
	<param name="dim" type="int" default="16" />
	<language name="glsl" version="1.5">
		<bind param="scale" program="fp" />
		<bind param="texVel" program="fp" />
		<bind param="texDye" program="fp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<bind param="dt" program="fp" />
		<bind param="dim" program="fp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, -1., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 outVel;

			uniform sampler2DRect texVel;
			uniform sampler2DRect texDye;
			uniform float dt;
			uniform int dim;

			int boundmode = 0;

			// When voxel leaves boundary it appears on the opposite sides
			vec2 bound(vec2 pos, vec2 prevPos) {
				if (boundmode == 0){
					return mod(pos, float(dim-1));
				} else {
					if (pos.x < 0. || pos.x > dim-1){
						pos.x - prevPos.x;
						return pos;
					} else { return pos; }
				}
			}
			
			vec4 textureRectBiLerp(vec2 pos, sampler2DRect texture) {
				vec4 Q11 = texelFetch(texture, ivec2(floor(pos)));
				vec4 Q21 = texelFetch(texture, ivec2(floor(pos)) + ivec2(1, 0));
				vec4 Q12 = texelFetch(texture, ivec2(floor(pos)) + ivec2(0, 1));
				vec4 Q22 = texelFetch(texture, ivec2(floor(pos)) + ivec2(1, 1));
				vec2 a = fract(pos);
				vec4 P = mix(mix(Q11, Q21, a.x), mix(Q12, Q22, a.x), a.y);
				return P;
			}

			vec4 advect(sampler2DRect texture){
				vec2 cellPos = jit_in.texcoord - vec2(0.5); //to get cell centre
				vec4 cellVelocity = texelFetch(texVel, ivec2(cellPos));
				vec2 nextPos = vec2(cellPos) - cellVelocity.xy * dt * dim;
				nextPos = bound(nextPos, cellPos);
				vec4 nextTex = textureRectBiLerp(nextPos, texture);
				return nextTex;
			}
			
			void main(void) {
				outVel = advect(texVel);
			}
	
		]]>
		</program>
	</language>
</jittershader>
